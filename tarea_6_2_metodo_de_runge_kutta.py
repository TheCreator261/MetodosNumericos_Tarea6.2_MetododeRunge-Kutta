# -*- coding: utf-8 -*-
"""Tarea 6.2 Metodo de Runge-Kutta.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13TQtOI5-bBF5MeiO5gU9qmBHu_UnIBwD
"""

# Antonio Josue Rodriguez Falcon
# Ejercicio 1: Transferencia de calor en un tubo

import numpy as np
import matplotlib.pyplot as plt

# Definición de la EDO: dT/dx = -0.25(T - 25)
def f(x, T):
    return -0.25 * (T - 25)

# Solución exacta
def sol_exacta(x):
    return 25 + 75 * np.exp(-0.25 * x)

# Método de Runge-Kutta de cuarto orden
def runge_kutta_4(f, x0, y0, x_end, h):
    x_vals = [x0]
    y_vals = [y0]
    x = x0
    y = y0

    while x < x_end:
        k1 = f(x, y)
        k2 = f(x + h/2, y + h/2 * k1)
        k3 = f(x + h/2, y + h/2 * k2)
        k4 = f(x + h, y + h * k3)

        y += h * (k1 + 2*k2 + 2*k3 + k4) / 6
        x += h

        x_vals.append(x)
        y_vals.append(y)

    return x_vals, y_vals

# Parámetros iniciales
x0 = 0
T0 = 100
x_end = 2
h = 0.1

# Solución numérica
x_vals, T_vals = runge_kutta_4(f, x0, T0, x_end, h)

# Solución exacta
T_exacta = [sol_exacta(x) for x in x_vals]

# Resultados en tabla
print("Distancia (m) | Temp RK4 (°C) | Temp Exacta (°C) | Diferencia")
for x, T, Te in zip(x_vals, T_vals, T_exacta):
    print(f"{x:10.2f} | {T:12.4f} | {Te:14.4f} | {abs(T-Te):9.4f}")

# Gráfica comparativa
plt.figure(figsize=(10,6))
plt.plot(x_vals, T_vals, 'bo-', label='Solución RK4')
plt.plot(x_vals, T_exacta, 'r-', label='Solución Exacta')
plt.title('Perfil de temperatura en tubo')
plt.xlabel('Distancia (m)')
plt.ylabel('Temperatura (°C)')
plt.legend()
plt.grid(True)
plt.savefig('ejercicio1_rk4.png', dpi=300)
plt.show()

# Antonio Josue Rodriguez Falcon
# Ejercicio 2: Carga de capacitor RC

import numpy as np
import matplotlib.pyplot as plt

# Parámetros del circuito
V = 10  # Voltaje fuente (V)
R = 1000  # Resistencia (Ohm)
C = 0.001  # Capacitancia (F)

# Definición de la EDO: dq/dt = (V - q/C)/R
def f(t, q):
    return (V - q/C)/R

# Solución exacta
def sol_exacta(t):
    return C * V * (1 - np.exp(-t/(R*C)))

# Configuración RK4
t0 = 0
q0 = 0
t_end = 1
h = 0.05

# Solución numérica
t_vals, q_vals = runge_kutta_4(f, t0, q0, t_end, h)

# Solución exacta
q_exacta = [sol_exacta(t) for t in t_vals]

# Resultados
print("Tiempo (s) | Carga RK4 (C) | Carga Exacta (C) | Error Rel (%)")
for t, q, qe in zip(t_vals, q_vals, q_exacta):
    print(f"{t:8.2f} | {q:12.6f} | {qe:14.6f} | {100*abs(q-qe)/qe:10.4f}")

# Gráfica
plt.figure(figsize=(10,6))
plt.plot(t_vals, q_vals, 'bo-', label='RK4 (h=0.05)')
plt.plot(t_vals, q_exacta, 'r-', label='Solución Exacta')
plt.title('Carga de capacitor en circuito RC')
plt.xlabel('Tiempo (s)')
plt.ylabel('Carga (C)')
plt.legend()
plt.grid(True)
plt.savefig('ejercicio2_rk4.png', dpi=300)
plt.show()

#Antonio Josue Rodriguez Falcon
#Ejercicio 3: Sistema masa-resorte-amortiguador

import numpy as np
import matplotlib.pyplot as plt

# Parámetros del sistema
m = 1.0  # masa (kg)
k = 2.0  # constante del resorte (N/m)
c = 0.5  # coeficiente de amortiguamiento (Ns/m)

# Sistema de EDOs convertido
def f(t, Y):
    y1, y2 = Y
    return np.array([y2, (-c*y2 - k*y1)/m])

# RK4 para sistemas de EDOs
def runge_kutta_4_system(f, t0, Y0, t_end, h):
    t_vals = [t0]
    Y_vals = [Y0]
    t = t0
    Y = np.array(Y0)

    while t < t_end:
        k1 = f(t, Y)
        k2 = f(t + h/2, Y + h/2 * k1)
        k3 = f(t + h/2, Y + h/2 * k2)
        k4 = f(t + h, Y + h * k3)

        Y += h * (k1 + 2*k2 + 2*k3 + k4) / 6
        t += h

        t_vals.append(t)
        Y_vals.append(Y.copy())

    return t_vals, np.array(Y_vals)

# Condiciones iniciales
t0 = 0
Y0 = [1.0, 0.0]  # [posición, velocidad]
t_end = 5
h = 0.1

# Solución numérica
t_vals, Y_vals = runge_kutta_4_system(f, t0, Y0, t_end, h)

# Gráficas
plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.plot(t_vals, Y_vals[:,0], 'b-', label='Posición (m)')
plt.title('Posición vs Tiempo')
plt.xlabel('Tiempo (s)')
plt.ylabel('Posición (m)')
plt.grid(True)
plt.legend()

plt.subplot(1,2,2)
plt.plot(Y_vals[:,0], Y_vals[:,1], 'r-')
plt.title('Diagrama de Fase')
plt.xlabel('Posición (m)')
plt.ylabel('Velocidad (m/s)')
plt.grid(True)
plt.tight_layout()
plt.savefig('ejercicio3_rk4.png', dpi=300)
plt.show()